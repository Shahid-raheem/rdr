name: RDP (Tailscale Funnel)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-2022
    timeout-minutes: 360

    steps:
      - name: Configure Remote Desktop
        run: |
          Write-Host "üîß Enabling RDP and configuring firewall..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force
          Write-Host "‚úÖ RDP enabled."

      - name: Create RDP User
        run: |
          Write-Host "üë§ Creating local user for RDP..."
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_USER=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV
          Write-Host "‚úÖ User created: RDP / $password"

      - name: Install Tailscale
        run: |
          Write-Host "‚¨áÔ∏è Installing Tailscale..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i `"$installer`" /quiet /norestart" -Wait
          Remove-Item $installer -Force
          Write-Host "‚úÖ Tailscale installed."

      - name: Connect to Tailnet with Funnel
        run: |
          Write-Host "üåê Connecting Tailscale with Funnel access..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up `
            --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} `
            --hostname=gh-runner-$env:GITHUB_RUN_ID `
            --ssh `
            --accept-funnel `
            --advertise-tags=tag:ci-runner `
            --accept-dns=false

          Write-Host "‚úÖ Tailscale connected."
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Expose RDP via Tailscale Funnel
        run: |
          Write-Host "üöÄ Enabling Tailscale Funnel on port 3389..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" funnel 3389
          Write-Host "‚úÖ RDP Funnel active!"

      - name: Display Connection Info
        run: |
          Write-Host "`n============================="
          Write-Host "üñ•Ô∏è  RDP ACCESS DETAILS"
          Write-Host "Funnel Address: https://gh-runner-$env:GITHUB_RUN_ID.ts.net:3389"
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "=============================`n"

      - name: Keep Alive
        run: |
          Write-Host "üí° Runner active. Press 'Cancel workflow' to stop."
          while ($true) {
              Write-Host "[$(Get-Date)] RDP session still active..."
              Start-Sleep -Seconds 300
          }
